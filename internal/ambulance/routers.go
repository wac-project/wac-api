/*
 * Hospital Management API
 *
 * API for managing hospital ambulances, procedures, and payments.
 *
 * API version: 1.0.0
 * Contact: xkokavecs@stuba.sk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package ambulance

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the AmbulanceManagementAPI part of the API
	AmbulanceManagementAPI AmbulanceManagementAPI
	// Routes for the PaymentManagementAPI part of the API
	PaymentManagementAPI PaymentManagementAPI
	// Routes for the ProcedureManagementAPI part of the API
	ProcedureManagementAPI ProcedureManagementAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
		{
			"CreateAmbulance",
			http.MethodPost,
			"/api/ambulances",
			handleFunctions.AmbulanceManagementAPI.CreateAmbulance,
		},
		{
			"DeleteAmbulance",
			http.MethodDelete,
			"/api/ambulances/:ambulanceId",
			handleFunctions.AmbulanceManagementAPI.DeleteAmbulance,
		},
		{
			"GetAmbulanceById",
			http.MethodGet,
			"/api/ambulances/:ambulanceId",
			handleFunctions.AmbulanceManagementAPI.GetAmbulanceById,
		},
		{
			"GetAmbulanceSummary",
			http.MethodGet,
			"/api/ambulances/:ambulanceId/summary",
			handleFunctions.AmbulanceManagementAPI.GetAmbulanceSummary,
		},
		{
			"GetAmbulances",
			http.MethodGet,
			"/api/ambulances",
			handleFunctions.AmbulanceManagementAPI.GetAmbulances,
		},
		{
			"GetProceduresByAmbulance",
			http.MethodGet,
			"/api/ambulances/:ambulanceId/procedures",
			handleFunctions.AmbulanceManagementAPI.GetProceduresByAmbulance,
		},
		{
			"UpdateAmbulance",
			http.MethodPut,
			"/api/ambulances/:ambulanceId",
			handleFunctions.AmbulanceManagementAPI.UpdateAmbulance,
		},
		{
			"CreatePayment",
			http.MethodPost,
			"/api/payments",
			handleFunctions.PaymentManagementAPI.CreatePayment,
		},
		{
			"DeletePayment",
			http.MethodDelete,
			"/api/payments/:paymentId",
			handleFunctions.PaymentManagementAPI.DeletePayment,
		},
		{
			"GetPaymentById",
			http.MethodGet,
			"/api/payments/:paymentId",
			handleFunctions.PaymentManagementAPI.GetPaymentById,
		},
		{
			"GetPayments",
			http.MethodGet,
			"/api/payments",
			handleFunctions.PaymentManagementAPI.GetPayments,
		},
		{
			"UpdatePayment",
			http.MethodPut,
			"/api/payments/:paymentId",
			handleFunctions.PaymentManagementAPI.UpdatePayment,
		},
		{
			"CreateProcedure",
			http.MethodPost,
			"/api/procedures",
			handleFunctions.ProcedureManagementAPI.CreateProcedure,
		},
		{
			"DeleteProcedure",
			http.MethodDelete,
			"/api/procedures/:procedureId",
			handleFunctions.ProcedureManagementAPI.DeleteProcedure,
		},
		{
			"GetProcedureById",
			http.MethodGet,
			"/api/procedures/:procedureId",
			handleFunctions.ProcedureManagementAPI.GetProcedureById,
		},
		{
			"GetProcedures",
			http.MethodGet,
			"/api/procedures",
			handleFunctions.ProcedureManagementAPI.GetProcedures,
		},
		{
			"UpdateProcedure",
			http.MethodPut,
			"/api/procedures/:procedureId",
			handleFunctions.ProcedureManagementAPI.UpdateProcedure,
		},
	}
}
